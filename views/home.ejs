<section class="mb-8">
  <h1 class="text-3xl md:text-4xl font-bold tracking-tight mb-3">Agile ways of working</h1>
  <p class="text-slate-600">A home for your Markdown-powered articles, automatically discovered from <code class="font-mono bg-slate-100 px-1.5 py-0.5 rounded">./data/docs</code>.</p>
</section>

<section class="mb-6">
  <div class="flex flex-col md:flex-row md:items-center gap-3">
    <div class="relative flex-1">
      <label for="search" class="sr-only">Search articles</label>
      <input
        id="search"
        type="search"
        placeholder="Search by title or tag..."
        class="w-full rounded-lg border border-slate-300 bg-white px-4 py-2.5 pr-10 text-slate-900 placeholder-slate-400 shadow-sm outline-none focus:border-brand-600 focus:ring-2 focus:ring-brand-100 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100 dark:placeholder-slate-400"
      />
      <svg class="pointer-events-none absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.8" d="M21 21l-4.35-4.35M11 19a8 8 0 1 1 0-16 8 8 0 0 1 0 16Z" />
      </svg>
    </div>
    <div>
      <label for="sort" class="sr-only">Sort</label>
      <select id="sort" class="rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm text-slate-700 shadow-sm focus:border-brand-600 focus:ring-2 focus:ring-brand-100 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100">
        <option value="new">Newest</option>
        <option value="old">Oldest</option>
        <option value="az">Aâ€“Z</option>
      </select>
    </div>
  </div>
  <div id="tag-filter" class="mt-3 flex flex-wrap gap-2"></div>
  <p id="results-count" class="mt-2 text-sm text-slate-600 dark:text-slate-300" aria-live="polite"></p>
</section>

<section>
  <% if (!articles || !articles.length) { %>
    <div class="rounded-xl border border-dashed border-slate-300 bg-white p-8 text-center text-slate-600">
      <p class="mb-2">No articles were found.</p>
      <p class="text-sm">Add .md files under <span class="font-mono bg-slate-100 px-1.5 py-0.5 rounded">./data/docs</span> and refresh.</p>
    </div>
  <% } else { %>
    <ul id="grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      <% articles.forEach(a => { %>
        <li
          class="group rounded-xl border border-slate-200 bg-white p-5 shadow-sm hover:shadow-md transition-all hover:-translate-y-0.5 dark:border-slate-700 dark:bg-slate-800"
          data-title="<%= (a.title || '').toLowerCase() %>"
          data-tags="<%= (a.tags || []).map(t => String(t).toLowerCase()).join(' ') %>"
          data-date="<%= a.date ? new Date(a.date).toISOString() : '' %>"
        >
          <div class="flex items-start justify-between gap-4">
            <div>
              <h2 class="text-lg font-semibold leading-snug group-hover:text-brand-700">
                <a class="hover:underline" href="/<%= a.slug %>"><%= a.title %></a>
              </h2>
              <% if (a.date) { %>
                <p class="mt-0.5 text-xs text-slate-500"><%= new Date(a.date).toLocaleDateString() %></p>
              <% } %>
            </div>
            <% if (a.tags && a.tags.length) { %>
              <div class="flex flex-wrap gap-1.5 justify-end">
                <% a.tags.slice(0, 3).forEach(tag => { %>
                  <span class="inline-block rounded-full bg-slate-100 text-slate-700 text-xs px-2 py-1"><%= tag %></span>
                <% }) %>
                <% if (a.tags.length > 3) { %>
                  <span class="inline-block rounded-full bg-slate-100 text-slate-700 text-xs px-2 py-1">+<%= a.tags.length - 3 %></span>
                <% } %>
              </div>
            <% } %>
          </div>
          <% if (a.description) { %>
            <p class="mt-3 text-sm text-slate-700 line-clamp-3"><%= a.description %></p>
          <% } %>
          <div class="mt-4">
            <a href="/<%= a.slug %>" class="inline-flex items-center gap-1 text-sm font-medium text-brand-700 group-hover:gap-1.5 transition-all">
              Read more
              <svg class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 0 1 1.414 0l5 5a1 1 0 0 1 0 1.414l-5 5a1 1 0 1 1-1.414-1.414L13.586 11H4a1 1 0 1 1 0-2h9.586l-3.293-3.293a1 1 0 0 1 0-1.414Z" clip-rule="evenodd" />
              </svg>
            </a>
          </div>
        </li>
      <% }) %>
    </ul>
    <div id="empty" class="hidden rounded-xl border border-dashed border-slate-300 bg-white p-8 text-center text-slate-600 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-300 mt-6">
      <p class="mb-2">No articles match your filters.</p>
      <p class="text-sm">Try clearing the search or tag filters.</p>
    </div>
    <div id="load-more-wrap" class="mt-8 text-center">
      <button id="load-more" class="inline-flex items-center gap-2 rounded-lg bg-brand-600 px-4 py-2 text-white shadow hover:bg-brand-700 focus:outline-none focus:ring-2 focus:ring-brand-400 disabled:opacity-50">Load more</button>
    </div>
  <% } %>
</section>

<script>
  (function () {
    const grid = document.getElementById('grid');
    if (!grid) return;

    const input = document.getElementById('search');
    const sort = document.getElementById('sort');
    const tagFilter = document.getElementById('tag-filter');
    const resultsCount = document.getElementById('results-count');
    const loadMoreBtn = document.getElementById('load-more');
    const empty = document.getElementById('empty');

    const pageSize = 12;
    let visibleCount = pageSize;
    const selectedTags = new Set();

    const items = Array.from(grid.children);

    // Build tag chips from existing items
    const tagSet = new Set();
    for (const li of items) {
      const tags = (li.dataset.tags || '').split(/\s+/).filter(Boolean);
      tags.forEach((t) => tagSet.add(t));
    }
    const allTags = Array.from(tagSet).sort((a, b) => a.localeCompare(b));
    if (allTags.length) {
      for (const tag of allTags) {
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.textContent = tag;
        btn.setAttribute('data-tag', tag);
        btn.setAttribute('aria-pressed', 'false');
        btn.className = 'inline-flex items-center gap-2 rounded-full border border-slate-300 bg-white px-3 py-1.5 text-xs text-slate-700 hover:bg-slate-50 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-200';
        btn.addEventListener('click', () => {
          if (selectedTags.has(tag)) {
            selectedTags.delete(tag);
            btn.setAttribute('aria-pressed', 'false');
            btn.classList.remove('ring-2', 'ring-brand-400', 'bg-brand-50');
          } else {
            selectedTags.add(tag);
            btn.setAttribute('aria-pressed', 'true');
            btn.classList.add('ring-2', 'ring-brand-400', 'bg-brand-50');
          }
          resetAndRender();
        });
        tagFilter.appendChild(btn);
      }
    } else {
      tagFilter.classList.add('hidden');
    }

    function getFilteredItems() {
      const q = (input?.value || '').trim().toLowerCase();
      return items.filter((li) => {
        const title = li.dataset.title || '';
        const tagsStr = li.dataset.tags || '';
        const tags = tagsStr.split(/\s+/).filter(Boolean);
        const matchesQuery = !q || title.includes(q) || tagsStr.includes(q);
        const matchesTags = selectedTags.size === 0 || tags.some((t) => selectedTags.has(t));
        return matchesQuery && matchesTags;
      });
    }

    function sortItems(list) {
      const val = sort?.value || 'new';
      if (val === 'az') {
        list.sort((a, b) => (a.dataset.title || '').localeCompare(b.dataset.title || ''));
      } else if (val === 'old') {
        list.sort((a, b) => (a.dataset.date || '').localeCompare(b.dataset.date || ''));
      } else {
        // newest
        list.sort((a, b) => (b.dataset.date || '').localeCompare(a.dataset.date || ''));
      }
      return list;
    }

    function render() {
      const filtered = sortItems(getFilteredItems());
      const total = filtered.length;
      // Hide all
      for (const li of items) li.style.display = 'none';

      // Show first N
      const toShow = filtered.slice(0, visibleCount);
      for (const li of toShow) li.style.display = '';

      // Update UI
      if (resultsCount) {
        resultsCount.textContent = total ? `${Math.min(visibleCount, total)} of ${total} articles` : 'No matching articles';
      }
      if (empty) {
        empty.classList.toggle('hidden', total > 0);
      }
      if (loadMoreBtn) {
        loadMoreBtn.disabled = visibleCount >= total;
        loadMoreBtn.classList.toggle('hidden', total <= pageSize);
      }
    }

    function resetAndRender() {
      visibleCount = pageSize;
      render();
    }

    // Events
    input?.addEventListener('input', resetAndRender);
    sort?.addEventListener('change', resetAndRender);
    loadMoreBtn?.addEventListener('click', () => {
      visibleCount += pageSize;
      render();
    });

    // Initial
    render();
  })();
</script>
